[user]
	name = Derek Garcia
	email = 78934662+dlg1206@users.noreply.github.com
[alias]
	# list all alias
	ls="!git config --list | grep ^alias"

    # Simple git log
	lg="log --graph --abbrev-commit --decorate --all --pretty=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'"

	# Add and Commit
	ac="!git add . && git commit -m"

	# list all branches
	ba=branch -a

	# delete branch
	dl=branch -D

	# switch branch
	sw=switch

	# return to previous branch
	bk=checkout -

	# prune remote branches
	cl=remote prune origin

	# checkout remote branches and track
	rc="!f() { git checkout -B "$1" origin/"$1"; }; f"

	# checkout branches from current
	feat="!f() { git checkout -B feature/"$1"; }; f"
	bfix="!f() { git checkout -B bugfix/"$1"; }; f"
	hfix="!f() { git checkout -B hotfix/"$1"; }; f"

	# show status
	s=status

	# Reset remote: overwrite local changes with remote
    rr = reset --hard @{u}

	# quick rebase
	qrb="!f() { [ -z "$1" ] && { echo "Failed: Missing rebase branch. Usage: git qrb branch"; exit 1; }; git switch $1; git pull --rebase; git checkout -; git rebase $1 || { git rebase --abort && echo Failed to quick rebase; }; }; f "

	# PR prep
	pr="!f() { [ -z "$1" ] && { echo "Failed: Missing rebase branch. Usage: git pr branch"; exit 1; }; git pull --rebase; git switch $1; git pull --rebase; git checkout -; git rebase -i $1; }; f"

	# Explicitly make a merge commit
	mc="!f() { [ -z "$1" ] && { echo "Failed: Missing merge branch. Usage: git mc branch"; exit 1; }; git pull --rebase; git merge --no-ff $1 || git merge --abort; git commit --amend;}; f "

    # Show who the user is
    whoami="!git config user.name && git config user.email"

    # Set username
    set-name="!f() { if [ -z \"$1\" ]; then echo \"Failed: Missing name. Usage: git set-name <name>\"; exit 1; fi; git config user.name \"$1\"; git config user.name; }; f"

    # Set email
    set-email="!f() { if [ -z \"$1\" ]; then echo \"Failed: Missing name. Usage: git set-name <name>\"; exit 1; fi; git config user.name \"$1\"; git config user.name; }; f"


[init]
    # init branch is main
    defaultBranch = main
[pull]
    # rebase local changes ontop of remote
	rebase = true
[push]
    # create remote branch if den
	autoSetupRemote = true
