[user]
	name = Derek Garcia
	email = 78934662+dlg1206@users.noreply.github.com
[alias]
	# list all alias
	ls="!git config --list | grep ^alias"

    # Simple git log
	lg="log --graph --abbrev-commit --decorate --all --pretty=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'"

	# Add and Commit
	ac="!git add . && git commit -m"

	# list all branches
	ba=branch -a

	# delete branch
	dl=branch -D

	# switch branch
	sw=switch

	# return to previous branch
	bk=checkout -

	# prune remote branches
	cl=remote prune origin

	# checkout remote branches and track
	rc="!f() { [ -z \"$1\" ] && { echo \"Failed: Missing branch name. Usage: git rc <branch>\"; exit 1; }; git checkout -B \"$1\" origin/\"$1\"; }; f"

	# checkout branches from current
	feat="!f() { [ -z \"$1\" ] && { echo \"Failed: Missing branch name. Usage: git feat <branch>\"; exit 1; }; git checkout -B feature/\"$1\"; }; f"
	test="!f() { [ -z \"$1\" ] && { echo \"Failed: Missing branch name. Usage: git test <branch>\"; exit 1; }; git checkout -B test/\"$1\"; }; f"
    rfct="!f() { [ -z \"$1\" ] && { echo \"Failed: Missing branch name. Usage: git rfct <branch>\"; exit 1; }; git checkout -B refactor/\"$1\"; }; f"
	bfix="!f() { [ -z \"$1\" ] && { echo \"Failed: Missing branch name. Usage: git bfix <branch>\"; exit 1; }; git checkout -B bugfix/\"$1\"; }; f"
	hfix="!f() { [ -z \"$1\" ] && { echo \"Failed: Missing branch name. Usage: git hfix <branch>\"; exit 1; }; git checkout -B hotfix/\"$1\"; }; f"

	# show status
	s=status

	# Reset remote: overwrite local changes with remote
    rr = reset --hard @{u}

	# quick rebase
	qrb="!f() { if [ -z \"$1\" ]; then echo \"Failed: Missing rebase branch. Usage: git qrb <branch>\"; exit 1; fi; git switch \"$1\"; git pull --rebase --autostash; git checkout -; git rebase \"$1\" || { git rebase --abort && echo \"Failed to quick rebase\"; }; }; f"

	# Explicitly make a merge commit
	mc="!f() { if [ -z \"$1\" ]; then echo \"Failed: Missing merge branch. Usage: git mc <branch>\"; exit 1; fi; git pull --rebase; git merge --no-ff \"$1\" || { echo \"Failed to quick merge\"; git merge --abort; }; }; f"

    # Show who the user is
    whoami="!git config user.name && git config user.email"

    # Set username
    set-name="!f() { if [ -z \"$1\" ]; then echo \"Failed: Missing name. Usage: git set-name <name>\"; exit 1; fi; git config user.name \"$1\"; git config user.name; }; f"

    # Set email
    set-email="!f() { if [ -z \"$1\" ]; then echo \"Failed: Missing name. Usage: git set-email <email>\"; exit 1; fi; git config user.email \"$1\"; git config user.email; }; f"

    # Get last n commits
    lc="!f() { n_commits=\"${1:-1}\"; git log --oneline -n \"$n_commits\"; }; f"

    # Rename branch
    rn="!f() { if [ -z \"$1\" ]; then echo \"Failed: Missing name. Usage: git rn <name>\"; exit 1; fi; git branch -m \"$1\"; git rev-parse --abbrev-ref HEAD; }; f"

    # stash with optional message
    st="!f() { if [ -z \"$1\" ]; then git stash; else git stash push -m \"$1\"; fi; git stash list; }; f"

    # list stashes
    stl=stash list

    # pop stash n
    stp="!f() { n=\"${1:-0}\"; git stash pop stash@{\"$n\"}; }; f"

    # show which branch on
    whereami=rev-parse --abbrev-ref HEAD


[init]
    # init branch is main
    defaultBranch = main
[rebase]
	autoStash = true
[pull]
    # rebase local changes onto of remote
	rebase = true
[push]
    # create remote branch if den
	autoSetupRemote = true