[user]
	name = Derek Garcia
	email = 78934662+dlg1206@users.noreply.github.com
[alias]
	#
	# LOCAL BRANCH MANAGEMENT
	#

	# d: list all branches
	# usage: git ba
	ba=branch -a

	# d: Show the name of the current branch
	# usage: git whereami
	whereami=rev-parse --abbrev-ref HEAD

	# d: Switch branches
	# usage: git sw <branch>
	sw=switch

	# d: return to previous branch
	# usage: git bk
	bk=checkout -

	# d: Rename current branch
	# usage: git rn <name>
	rn="!f() { if [ -z \"$1\" ]; then echo \"Failed: Missing name. Usage: git rn <name>\"; exit 1; fi; git branch -m \"$1\"; git rev-parse --abbrev-ref HEAD; }; f"

	# d: Create new feature branch
	# usage: git feat <name>
	feat="!f() { [ -z \"$1\" ] && { echo \"Failed: Missing branch name. Usage: git feat <branch>\"; exit 1; }; git checkout -B feature/\"$1\"; }; f"

	# d: Create new test branch
	# usage: git test <name>
	test="!f() { [ -z \"$1\" ] && { echo \"Failed: Missing branch name. Usage: git test <branch>\"; exit 1; }; git checkout -B test/\"$1\"; }; f"

	# d: Create new refactor branch
	# usage: git rfct <name>
	rfct="!f() { [ -z \"$1\" ] && { echo \"Failed: Missing branch name. Usage: git rfct <branch>\"; exit 1; }; git checkout -B refactor/\"$1\"; }; f"

	# d: Create new bugfix branch
	# usage: git bfix <name>
	bfix="!f() { [ -z \"$1\" ] && { echo \"Failed: Missing branch name. Usage: git bfix <branch>\"; exit 1; }; git checkout -B bugfix/\"$1\"; }; f"

	# d: Create new hotfix branch
	# usage: git hfix <name>
	hfix="!f() { [ -z \"$1\" ] && { echo \"Failed: Missing branch name. Usage: git hfix <branch>\"; exit 1; }; git checkout -B hotfix/\"$1\"; }; f"

	# d: Quick rebase current branch onto another
	# usage: git qrb <branch>
	qrb="!f() { if [ -z \"$1\" ]; then echo \"Failed: Missing rebase branch. Usage: git qrb <branch>\"; exit 1; fi; git switch \"$1\"; git pull --rebase --autostash; git checkout -; git rebase \"$1\" || { git rebase --abort && echo \"Failed to quick rebase\"; }; }; f"

	# d: Explicitly make a merge commit from another branch into current branch
	# usage: git mc <branch>
	mc="!f() { if [ -z \"$1\" ]; then echo \"Failed: Missing merge branch. Usage: git mc <branch>\"; exit 1; fi; git pull --rebase; git merge --no-ff \"$1\" || { echo \"Failed to quick merge\"; git merge --abort; }; }; f"

	# d: Delete branch
	# usage: git dl <branch>
	dl="!f() { [ -z \"$1\" ] && { echo \"Failed: Missing branch name. Usage: git dl <branch>\"; exit 1; }; git branch -D \"$1\"; }; f"

	#
	# REMOTE BRANCH MANAGEMENT
	#

	# d: Clone repo with config, folder is optional
	# usage: git clone-as <url> <folder?>
	clone-as="!f() { \
        read -rp \"Name (default: $(git config --global user.name)): \" name; \
        read -rp \"Email (default: $(git config --global user.email)): \" email; \
        if [ -z \"$2\" ]; then \
            git clone \"$1\"; \
			cd \"$(basename \"${1%.git}\" .git)\" || exit 1; \
        else \
            git clone \"$1\" \"$2\"; \
			cd \"$2\" || exit 1; \
        fi || exit 1; \
        if [ -n \"$name\" ]; then git config user.name \"$name\"; fi; \
        if [ -n \"$email\" ]; then git config user.email \"$email\"; fi; \
        echo \"Name: $(git config user.name)\" && echo \"Email: $(git config user.email)\"; \
        cd .. && exit 0; \
    }; f"

	# d: Checkout remote branches and track
	# usage: git rc <branch>
	rc="!f() { [ -z \"$1\" ] && { echo \"Failed: Missing branch name. Usage: git rc <branch>\"; exit 1; }; git checkout -B \"$1\" origin/\"$1\"; }; f"

	# d: Push with force-with-lease
	# usage: git fpush
	fpush=push --force-with-lease

	# d: Overwrite local changes with remote ( reset remote )
	# usage: git rr
	rr = reset --hard @{u}

	# d: Prune remote branches
	# usage: git cl
	cl=remote prune origin

	# d: Delete local and remote branch
	# usage: git dlr <branch>
	dlr="!f() { [ -z \"$1\" ] && { echo \"Failed: Missing branch name. Usage: git dlr <branch>\"; exit 1; }; git branch -D \"$1\"; git push origin -d \"$1\"; git fetch --prune; }; f"

	#
	# COMMITS
	#

	# d: Show git status
	# usage: git s
	s=status

	# d: Stage all changes and commit
	# usage: git ac "<commit message>"
	ac="!git add . && git commit -m"

	# d: Get last n commits ( default is 1 )
	# usage: git lc <n?>
	lc="!f() { n_commits=\"${1:-1}\"; git log --oneline -n \"$n_commits\"; }; f"

	#
	# STASH
	#

	# d: Stash changes with optional message
	# usage: git st <message?>
	st="!f() { if [ -z \"$1\" ]; then git stash; else git stash push -m \"$1\"; fi; }; f"

	# d: List stashes
	# usage: git stl
	stl=stash list

	# d: Pop nth stash ( default is 0 )
	# usage: git stp <n?>
	stp="!f() { n=\"${1:-0}\"; git stash pop stash@{\"$n\"}; }; f"

    # d: Drop nth stash ( default is 0 )
    # usage: git std <n?>
    std="!f() { n=\"${1:-0}\"; git stash drop stash@{\"$n\"}; }; f"

	#
	# CONFIGURATION
	#

	# d: Show who the user is
	# usage: git whoami
	whoami="!git config user.name && git config user.email"

	# d: Set username for current repo
	# usage: git set-name "<name>"
	set-name="!f() { if [ -z \"$1\" ]; then echo \"Failed: Missing name. Usage: git set-name <name>\"; exit 1; fi; git config user.name \"$1\"; git config user.name; }; f"

	# d: Set email for current repo
	# usage: git set-email "<email>"
	set-email="!f() { if [ -z \"$1\" ]; then echo \"Failed: Missing name. Usage: git set-email <email>\"; exit 1; fi; git config user.email \"$1\"; git config user.email; }; f"

	#
	# UTIL
	#

	# d: Show pretty git log
	# usage: git lg
	lg="log --graph --abbrev-commit --decorate --all --pretty=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'"

    # d: List all aliases
    # usage: git ls
    ls="!f() { \
                echo -e \"\nLOCAL BRANCH MANAGEMENT\"; \
                echo -e \"ba: List all branches\n\tusage: git ba\"; \
                echo -e \"whereami: Show the name of the current branch\n\tusage: git whereami\"; \
                echo -e \"sw: Switch branches\n\tusage: git sw <branch>\"; \
                echo -e \"bk: Return to previous branch\n\tusage: git bk\"; \
                echo -e \"rn: Rename current branch\n\tusage: git rn <name>\"; \
                echo -e \"feat: Create new feature branch\n\tusage: git feat <name>\"; \
                echo -e \"test: Create new test branch\n\tusage: git test <name>\"; \
                echo -e \"rfct: Create new refactor branch\n\tusage: git rfct <name>\"; \
                echo -e \"bfix: Create new bugfix branch\n\tusage: git bfix <name>\"; \
                echo -e \"hfix: Create new hotfix branch\n\tusage: git hfix <name>\"; \
                echo -e \"qrb: Quick rebase current branch onto another\n\tusage: git qrb <branch>\"; \
                echo -e \"mc: Explicitly make a merge commit from another branch into current branch\n\tusage: git mc <branch>\"; \
                echo -e \"dl: Delete branch\n\tusage: git dl <branch>\"; \
                echo -e \"\nREMOTE BRANCH MANAGEMENT\"; \
                echo -e \"clone-as: Clone repo with config, folder is optional\n\tusage: git clone-as <url> <folder?>\"; \
                echo -e \"rc: Checkout remote branches and track\n\tusage: git rc <branch>\"; \
                echo -e \"fpush: Push with force-with-lease\n\tusage: git fpush\"; \
                echo -e \"rr: Overwrite local changes with remote (reset remote)\n\tusage: git rr\"; \
                echo -e \"cl: Prune remote branches\n\tusage: git cl\"; \
                echo -e \"dlr: Delete local and remote branch\n\tusage: git dlr <branch>\"; \
                echo -e \"\nCOMMITS\"; \
                echo -e \"s: Show git status\n\tusage: git s\"; \
                echo -e \"ac: Stage all changes and commit\n\tusage: git ac '<commit message>'\"; \
                echo -e \"lc: Get last n commits (default is 1)\n\tusage: git lc <n?>\"; \
                echo -e \"\nSTASH\"; \
                echo -e \"st: Stash changes with optional message\n\tusage: git st <message?>\"; \
                echo -e \"stl: List stashes\n\tusage: git stl\"; \
                echo -e \"stp: Pop nth stash (default is 0)\n\tusage: git stp <n?>\"; \
                echo -e \"std: Drop nth stash (default is 0)\n\tusage: git std <n?>\"; \
                echo -e \"\nCONFIGURATION\"; \
                echo -e \"whoami: Show who the user is\n\tusage: git whoami\"; \
                echo -e \"set-name: Set username for current repo\n\tusage: git set-name '<name>'\"; \
                echo -e \"set-email: Set email for current repo\n\tusage: git set-email '<email>'\"; \
                echo -e \"\nUTIL\"; \
                echo -e \"lg: Show pretty git log\n\tusage: git lg\"; \
                echo -e \"ls: List all aliases\n\tusage: git ls\"; \
            }; f"


[init]
	# init branch is main
	defaultBranch = main
[rebase]
	# stash changes before rebasing
	autoStash = true
[pull]
	# rebase local changes onto of remote
	rebase = true
[push]
	# create remote branch if dne
	autoSetupRemote = true
[rerere]
	# Reuse Recorded Resolution: remember conflict resolution
	enabled = true
